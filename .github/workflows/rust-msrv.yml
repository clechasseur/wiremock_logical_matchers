name: MSRV

on: [ push ]

jobs:
  rust-msrv:
    name: Compute minimum supported Rust version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-binstall
        run: |
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install cargo-msrv
        uses: actions-rs/cargo@v1
        with:
          command: binstall
          args: --no-confirm --no-symlinks cargo-msrv

      - name: Install toml-cli
        run: |
          pip3 install toml-cli

      - name: Compute minimum supported Rust version
        id: msrv
        run: |
          cp Cargo.toml Cargo.toml.bak
          toml unset --toml-path Cargo.toml package.rust-version
          MSRV_RESULT=$(cargo msrv --output-format json -- cargo check --all-targets --all-features | tail -1)
          MSRV=$(echo $MSRV_RESULT | jq -r '.msrv')
          echo "msrv=$MSRV" >> $GITHUB_OUTPUT
          mv -f Cargo.toml.bak Cargo.toml

      - name: Output minimum supported Rust version
        run: 'echo "::notice file=Cargo.toml::MSRV is ${{ steps.msrv.outputs.msrv }}"'

      - name: Make sure minimum supported Rust version matches that specified in Cargo.toml
        run: |
          CARGO_METADATA=$(cargo metadata --no-deps --format-version 1 --locked)
          PACKAGE_MSRV=$(jq '.packages | .[] | select(.name == "wiremock_logical_matchers") | .rust_version' --raw-output <<< "$CARGO_METADATA")
          if [[ "$PACKAGE_MSRV" != "${{ steps.msrv.outputs.msrv }}" ]]; then
            echo "::error file=Cargo.toml::MSRV is ${{ steps.msrv.outputs.msrv }}, but found mismatch: $PACKAGE_MSRV"
            exit 1
          fi
